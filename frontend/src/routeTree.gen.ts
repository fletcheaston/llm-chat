/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as SettingsImport } from "./routes/settings"
import { Route as LoginImport } from "./routes/login"
import { Route as ChatImport } from "./routes/chat"
import { Route as IndexImport } from "./routes/index"
import { Route as ChatIndexImport } from "./routes/chat.index"
import { Route as SettingsVisualsImport } from "./routes/settings.visuals"
import { Route as SettingsSupportImport } from "./routes/settings.support"
import { Route as SettingsModelsImport } from "./routes/settings.models"
import { Route as JoinTokenImport } from "./routes/join.$token"
import { Route as ChatChatIdImport } from "./routes/chat.$chatId"

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: "/settings",
  path: "/settings",
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any)

const ChatRoute = ChatImport.update({
  id: "/chat",
  path: "/chat",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const ChatIndexRoute = ChatIndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => ChatRoute,
} as any)

const SettingsVisualsRoute = SettingsVisualsImport.update({
  id: "/visuals",
  path: "/visuals",
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsSupportRoute = SettingsSupportImport.update({
  id: "/support",
  path: "/support",
  getParentRoute: () => SettingsRoute,
} as any)

const SettingsModelsRoute = SettingsModelsImport.update({
  id: "/models",
  path: "/models",
  getParentRoute: () => SettingsRoute,
} as any)

const JoinTokenRoute = JoinTokenImport.update({
  id: "/join/$token",
  path: "/join/$token",
  getParentRoute: () => rootRoute,
} as any)

const ChatChatIdRoute = ChatChatIdImport.update({
  id: "/$chatId",
  path: "/$chatId",
  getParentRoute: () => ChatRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/chat": {
      id: "/chat"
      path: "/chat"
      fullPath: "/chat"
      preLoaderRoute: typeof ChatImport
      parentRoute: typeof rootRoute
    }
    "/login": {
      id: "/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    "/settings": {
      id: "/settings"
      path: "/settings"
      fullPath: "/settings"
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    "/chat/$chatId": {
      id: "/chat/$chatId"
      path: "/$chatId"
      fullPath: "/chat/$chatId"
      preLoaderRoute: typeof ChatChatIdImport
      parentRoute: typeof ChatImport
    }
    "/join/$token": {
      id: "/join/$token"
      path: "/join/$token"
      fullPath: "/join/$token"
      preLoaderRoute: typeof JoinTokenImport
      parentRoute: typeof rootRoute
    }
    "/settings/models": {
      id: "/settings/models"
      path: "/models"
      fullPath: "/settings/models"
      preLoaderRoute: typeof SettingsModelsImport
      parentRoute: typeof SettingsImport
    }
    "/settings/support": {
      id: "/settings/support"
      path: "/support"
      fullPath: "/settings/support"
      preLoaderRoute: typeof SettingsSupportImport
      parentRoute: typeof SettingsImport
    }
    "/settings/visuals": {
      id: "/settings/visuals"
      path: "/visuals"
      fullPath: "/settings/visuals"
      preLoaderRoute: typeof SettingsVisualsImport
      parentRoute: typeof SettingsImport
    }
    "/chat/": {
      id: "/chat/"
      path: "/"
      fullPath: "/chat/"
      preLoaderRoute: typeof ChatIndexImport
      parentRoute: typeof ChatImport
    }
  }
}

// Create and export the route tree

interface ChatRouteChildren {
  ChatChatIdRoute: typeof ChatChatIdRoute
  ChatIndexRoute: typeof ChatIndexRoute
}

const ChatRouteChildren: ChatRouteChildren = {
  ChatChatIdRoute: ChatChatIdRoute,
  ChatIndexRoute: ChatIndexRoute,
}

const ChatRouteWithChildren = ChatRoute._addFileChildren(ChatRouteChildren)

interface SettingsRouteChildren {
  SettingsModelsRoute: typeof SettingsModelsRoute
  SettingsSupportRoute: typeof SettingsSupportRoute
  SettingsVisualsRoute: typeof SettingsVisualsRoute
}

const SettingsRouteChildren: SettingsRouteChildren = {
  SettingsModelsRoute: SettingsModelsRoute,
  SettingsSupportRoute: SettingsSupportRoute,
  SettingsVisualsRoute: SettingsVisualsRoute,
}

const SettingsRouteWithChildren = SettingsRoute._addFileChildren(
  SettingsRouteChildren,
)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/chat": typeof ChatRouteWithChildren
  "/login": typeof LoginRoute
  "/settings": typeof SettingsRouteWithChildren
  "/chat/$chatId": typeof ChatChatIdRoute
  "/join/$token": typeof JoinTokenRoute
  "/settings/models": typeof SettingsModelsRoute
  "/settings/support": typeof SettingsSupportRoute
  "/settings/visuals": typeof SettingsVisualsRoute
  "/chat/": typeof ChatIndexRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/login": typeof LoginRoute
  "/settings": typeof SettingsRouteWithChildren
  "/chat/$chatId": typeof ChatChatIdRoute
  "/join/$token": typeof JoinTokenRoute
  "/settings/models": typeof SettingsModelsRoute
  "/settings/support": typeof SettingsSupportRoute
  "/settings/visuals": typeof SettingsVisualsRoute
  "/chat": typeof ChatIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/chat": typeof ChatRouteWithChildren
  "/login": typeof LoginRoute
  "/settings": typeof SettingsRouteWithChildren
  "/chat/$chatId": typeof ChatChatIdRoute
  "/join/$token": typeof JoinTokenRoute
  "/settings/models": typeof SettingsModelsRoute
  "/settings/support": typeof SettingsSupportRoute
  "/settings/visuals": typeof SettingsVisualsRoute
  "/chat/": typeof ChatIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/chat"
    | "/login"
    | "/settings"
    | "/chat/$chatId"
    | "/join/$token"
    | "/settings/models"
    | "/settings/support"
    | "/settings/visuals"
    | "/chat/"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/login"
    | "/settings"
    | "/chat/$chatId"
    | "/join/$token"
    | "/settings/models"
    | "/settings/support"
    | "/settings/visuals"
    | "/chat"
  id:
    | "__root__"
    | "/"
    | "/chat"
    | "/login"
    | "/settings"
    | "/chat/$chatId"
    | "/join/$token"
    | "/settings/models"
    | "/settings/support"
    | "/settings/visuals"
    | "/chat/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatRoute: typeof ChatRouteWithChildren
  LoginRoute: typeof LoginRoute
  SettingsRoute: typeof SettingsRouteWithChildren
  JoinTokenRoute: typeof JoinTokenRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatRoute: ChatRouteWithChildren,
  LoginRoute: LoginRoute,
  SettingsRoute: SettingsRouteWithChildren,
  JoinTokenRoute: JoinTokenRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chat",
        "/login",
        "/settings",
        "/join/$token"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/chat": {
      "filePath": "chat.tsx",
      "children": [
        "/chat/$chatId",
        "/chat/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx",
      "children": [
        "/settings/models",
        "/settings/support",
        "/settings/visuals"
      ]
    },
    "/chat/$chatId": {
      "filePath": "chat.$chatId.tsx",
      "parent": "/chat"
    },
    "/join/$token": {
      "filePath": "join.$token.tsx"
    },
    "/settings/models": {
      "filePath": "settings.models.tsx",
      "parent": "/settings"
    },
    "/settings/support": {
      "filePath": "settings.support.tsx",
      "parent": "/settings"
    },
    "/settings/visuals": {
      "filePath": "settings.visuals.tsx",
      "parent": "/settings"
    },
    "/chat/": {
      "filePath": "chat.index.tsx",
      "parent": "/chat"
    }
  }
}
ROUTE_MANIFEST_END */
