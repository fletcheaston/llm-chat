/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as LoginImport } from "./routes/login"
import { Route as ChatsImport } from "./routes/chats"
import { Route as IndexImport } from "./routes/index"
import { Route as ChatsChatIdImport } from "./routes/chats.$chatId"

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRoute,
} as any)

const ChatsRoute = ChatsImport.update({
  id: "/chats",
  path: "/chats",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const ChatsChatIdRoute = ChatsChatIdImport.update({
  id: "/$chatId",
  path: "/$chatId",
  getParentRoute: () => ChatsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/chats": {
      id: "/chats"
      path: "/chats"
      fullPath: "/chats"
      preLoaderRoute: typeof ChatsImport
      parentRoute: typeof rootRoute
    }
    "/login": {
      id: "/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    "/chats/$chatId": {
      id: "/chats/$chatId"
      path: "/$chatId"
      fullPath: "/chats/$chatId"
      preLoaderRoute: typeof ChatsChatIdImport
      parentRoute: typeof ChatsImport
    }
  }
}

// Create and export the route tree

interface ChatsRouteChildren {
  ChatsChatIdRoute: typeof ChatsChatIdRoute
}

const ChatsRouteChildren: ChatsRouteChildren = {
  ChatsChatIdRoute: ChatsChatIdRoute,
}

const ChatsRouteWithChildren = ChatsRoute._addFileChildren(ChatsRouteChildren)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/chats": typeof ChatsRouteWithChildren
  "/login": typeof LoginRoute
  "/chats/$chatId": typeof ChatsChatIdRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/chats": typeof ChatsRouteWithChildren
  "/login": typeof LoginRoute
  "/chats/$chatId": typeof ChatsChatIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/chats": typeof ChatsRouteWithChildren
  "/login": typeof LoginRoute
  "/chats/$chatId": typeof ChatsChatIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/chats" | "/login" | "/chats/$chatId"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/chats" | "/login" | "/chats/$chatId"
  id: "__root__" | "/" | "/chats" | "/login" | "/chats/$chatId"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatsRoute: typeof ChatsRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatsRoute: ChatsRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chats",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/chats": {
      "filePath": "chats.tsx",
      "children": [
        "/chats/$chatId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/chats/$chatId": {
      "filePath": "chats.$chatId.tsx",
      "parent": "/chats"
    }
  }
}
ROUTE_MANIFEST_END */
