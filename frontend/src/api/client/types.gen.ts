// This file is auto-generated by @hey-api/openapi-ts

/**
 * CsrfAuthUserSchema
 */
export type CsrfAuthUserSchema = {
    /**
     * Csrftoken
     */
    csrfToken: string;
    user: UserSchema;
    settings: SettingSchema;
};

/**
 * LargeLanguageModel
 */
export type LargeLanguageModel =
    | "utils-echo"
    | "openai-gpt-4.1"
    | "openai-gpt-4.1-mini"
    | "openai-gpt-4.1-nano";

/**
 * SettingSchema
 */
export type SettingSchema = {
    /**
     * Id
     */
    id: string;
    /**
     * Created
     */
    created: string;
    /**
     * Modified
     */
    modified: string;
    /**
     * Llmnickname
     */
    llmNickname: string;
    /**
     * Llmjob
     */
    llmJob: string;
    /**
     * Llmtraits
     */
    llmTraits: Array<string>;
    /**
     * Llmcontext
     */
    llmContext: string;
    /**
     * Llmsavailable
     */
    llmsAvailable: Array<LargeLanguageModel>;
    /**
     * Visualtheme
     */
    visualTheme: string;
    /**
     * Visualthemeprimaryoverride
     */
    visualThemePrimaryOverride: string;
    /**
     * Visualthemesecondaryoverride
     */
    visualThemeSecondaryOverride: string;
    /**
     * Visualthemebackgroundoverride
     */
    visualThemeBackgroundOverride: string;
    /**
     * Visualthemetextoverride
     */
    visualThemeTextOverride: string;
    /**
     * Visualthemeborderoverride
     */
    visualThemeBorderOverride: string;
    /**
     * Visualbranchvertical
     */
    visualBranchVertical: boolean;
};

/**
 * UserSchema
 */
export type UserSchema = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Imageurl
     */
    imageUrl: string;
};

/**
 * ErrorMessage
 */
export type ErrorMessage =
    | "User is unauthenticated."
    | "Invalid auth token."
    | "Resource does not exist.";

/**
 * ErrorSchema
 */
export type ErrorSchema = {
    detail: ErrorMessage;
};

/**
 * MessageSchema
 */
export type MessageSchema = {
    /**
     * Id
     */
    id: string;
    /**
     * Created
     */
    created: string;
    /**
     * Modified
     */
    modified: string;
    /**
     * Title
     */
    title: string;
    /**
     * Content
     */
    content: string;
    /**
     * Conversationid
     */
    conversationId: string;
    /**
     * Replytoid
     */
    replyToId: string | null;
    /**
     * Authorid
     */
    authorId: string | null;
    llm: LargeLanguageModel | null;
};

/**
 * NewMessageSchema
 */
export type NewMessageSchema = {
    /**
     * Id
     */
    id: string;
    /**
     * Title
     */
    title: string;
    /**
     * Content
     */
    content: string;
    /**
     * Conversationid
     */
    conversationId: string;
    /**
     * Replytoid
     */
    replyToId: string | null;
    /**
     * Llms
     */
    llms: Array<LargeLanguageModel>;
};

/**
 * ConversationSchema
 */
export type ConversationSchema = {
    /**
     * Id
     */
    id: string;
    /**
     * Created
     */
    created: string;
    /**
     * Modified
     */
    modified: string;
    /**
     * Title
     */
    title: string;
    /**
     * Ownerid
     */
    ownerId: string;
};

/**
 * NewConversationSchema
 */
export type NewConversationSchema = {
    /**
     * Id
     */
    id: string;
    /**
     * Title
     */
    title: string;
    /**
     * Memberid
     */
    memberId: string;
    /**
     * Messageid
     */
    messageId: string;
    /**
     * Messagetitle
     */
    messageTitle: string;
    /**
     * Messagecontent
     */
    messageContent: string;
    /**
     * Llms
     */
    llms: Array<LargeLanguageModel>;
};

/**
 * PreviewConversationSchema
 */
export type PreviewConversationSchema = {
    /**
     * Id
     */
    id: string;
    /**
     * Created
     */
    created: string;
    /**
     * Modified
     */
    modified: string;
    /**
     * Title
     */
    title: string;
    owner: UserSchema;
};

/**
 * SharedConversationSchema
 */
export type SharedConversationSchema = {
    /**
     * Token
     */
    token: string;
};

/**
 * ShareLinkSchema
 */
export type ShareLinkSchema = {
    /**
     * Token
     */
    token: string;
};

/**
 * UpdateConversationSchema
 */
export type UpdateConversationSchema = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * Messagebranches
     */
    messageBranches?: {
        [key: string]: boolean;
    } | null;
    /**
     * Llmsselected
     */
    llmsSelected?: Array<LargeLanguageModel> | null;
    /**
     * Hidden
     */
    hidden?: boolean | null;
};

/**
 * UpdateSettingSchema
 */
export type UpdateSettingSchema = {
    /**
     * Llmnickname
     */
    llmNickname?: string | null;
    /**
     * Llmjob
     */
    llmJob?: string | null;
    /**
     * Llmtraits
     */
    llmTraits?: Array<string> | null;
    /**
     * Llmcontext
     */
    llmContext?: string | null;
    /**
     * Llmsavailable
     */
    llmsAvailable?: Array<LargeLanguageModel> | null;
    /**
     * Visualtheme
     */
    visualTheme?: string | null;
    /**
     * Visualthemeprimaryoverride
     */
    visualThemePrimaryOverride?: string | null;
    /**
     * Visualthemesecondaryoverride
     */
    visualThemeSecondaryOverride?: string | null;
    /**
     * Visualthemebackgroundoverride
     */
    visualThemeBackgroundOverride?: string | null;
    /**
     * Visualthemetextoverride
     */
    visualThemeTextOverride?: string | null;
    /**
     * Visualthemeborderoverride
     */
    visualThemeBorderOverride?: string | null;
    /**
     * Visualbranchvertical
     */
    visualBranchVertical?: boolean | null;
};

/**
 * MemberSchema
 */
export type MemberSchema = {
    /**
     * Id
     */
    id: string;
    /**
     * Created
     */
    created: string;
    /**
     * Modified
     */
    modified: string;
    /**
     * Conversationid
     */
    conversationId: string;
    /**
     * Userid
     */
    userId: string;
    /**
     * Addedbyid
     */
    addedById: string;
    /**
     * Llmsselected
     */
    llmsSelected: Array<LargeLanguageModel>;
    /**
     * Messagebranches
     */
    messageBranches: {
        [key: string]: boolean;
    };
    /**
     * Hidden
     */
    hidden: boolean;
};

/**
 * MessageMetadataSchema
 */
export type MessageMetadataSchema = {
    /**
     * Id
     */
    id: string;
    /**
     * Conversationid
     */
    conversationId: string;
    /**
     * Replytoid
     */
    replyToId: string | null;
    /**
     * Created
     */
    created: string;
};

/**
 * SyncConversation
 */
export type SyncConversation = {
    /**
     * Type
     */
    type: "conversation";
    data: ConversationSchema;
};

/**
 * SyncMember
 */
export type SyncMember = {
    /**
     * Type
     */
    type: "member";
    data: MemberSchema;
};

/**
 * SyncMessage
 */
export type SyncMessage = {
    /**
     * Type
     */
    type: "message";
    data: MessageSchema;
};

/**
 * SyncMessageMetadata
 */
export type SyncMessageMetadata = {
    /**
     * Type
     */
    type: "message-metadata";
    data: MessageMetadataSchema;
};

/**
 * SyncUser
 */
export type SyncUser = {
    /**
     * Type
     */
    type: "user";
    data: UserSchema;
};

export type WhoAmIData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/auth/whoami";
};

export type WhoAmIErrors = {
    /**
     * Unauthorized
     */
    401: ErrorSchema;
};

export type WhoAmIError = WhoAmIErrors[keyof WhoAmIErrors];

export type WhoAmIResponses = {
    /**
     * OK
     */
    200: CsrfAuthUserSchema;
};

export type WhoAmIResponse = WhoAmIResponses[keyof WhoAmIResponses];

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/auth/logout";
};

export type LogoutResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GithubCallbackData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Code
         */
        code: string;
        /**
         * Redirect
         */
        redirect?: string | null;
    };
    url: "/api/auth/github-callback";
};

export type GithubCallbackErrors = {
    /**
     * Bad Request
     */
    400: ErrorSchema;
};

export type GithubCallbackError = GithubCallbackErrors[keyof GithubCallbackErrors];

export type GithubCallbackResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ListMyMessagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/messages/list";
};

export type ListMyMessagesResponses = {
    /**
     * Response
     * OK
     */
    200: Array<MessageSchema>;
};

export type ListMyMessagesResponse = ListMyMessagesResponses[keyof ListMyMessagesResponses];

export type CreateMessageData = {
    body: NewMessageSchema;
    path?: never;
    query?: never;
    url: "/api/messages/create";
};

export type CreateMessageErrors = {
    /**
     * Not Found
     */
    404: ErrorSchema;
};

export type CreateMessageError = CreateMessageErrors[keyof CreateMessageErrors];

export type CreateMessageResponses = {
    /**
     * OK
     */
    200: MessageSchema;
};

export type CreateMessageResponse = CreateMessageResponses[keyof CreateMessageResponses];

export type ListMyConversationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/conversations/list";
};

export type ListMyConversationsResponses = {
    /**
     * Response
     * OK
     */
    200: Array<ConversationSchema>;
};

export type ListMyConversationsResponse =
    ListMyConversationsResponses[keyof ListMyConversationsResponses];

export type CreateConversationData = {
    body: NewConversationSchema;
    path?: never;
    query?: never;
    url: "/api/conversations/create";
};

export type CreateConversationResponses = {
    /**
     * OK
     */
    200: ConversationSchema;
};

export type CreateConversationResponse =
    CreateConversationResponses[keyof CreateConversationResponses];

export type PreviewConversationData = {
    body: SharedConversationSchema;
    path?: never;
    query?: never;
    url: "/api/conversations/share/preview";
};

export type PreviewConversationResponses = {
    /**
     * OK
     */
    200: PreviewConversationSchema;
};

export type PreviewConversationResponse =
    PreviewConversationResponses[keyof PreviewConversationResponses];

export type JoinConversationData = {
    body: SharedConversationSchema;
    path?: never;
    query?: never;
    url: "/api/conversations/share/join";
};

export type JoinConversationErrors = {
    /**
     * Bad Request
     */
    400: ErrorSchema;
};

export type JoinConversationError = JoinConversationErrors[keyof JoinConversationErrors];

export type JoinConversationResponses = {
    /**
     * OK
     */
    200: ConversationSchema;
};

export type JoinConversationResponse = JoinConversationResponses[keyof JoinConversationResponses];

export type GenerateShareLinkData = {
    body?: never;
    path: {
        /**
         * Conversation Id
         */
        conversation_id: string;
    };
    query?: never;
    url: "/api/conversations/share/{conversation_id}";
};

export type GenerateShareLinkResponses = {
    /**
     * OK
     */
    200: ShareLinkSchema;
};

export type GenerateShareLinkResponse =
    GenerateShareLinkResponses[keyof GenerateShareLinkResponses];

export type UpdateConversationData = {
    body: UpdateConversationSchema;
    path: {
        /**
         * Conversation Id
         */
        conversation_id: string;
    };
    query?: never;
    url: "/api/conversations/update/{conversation_id}";
};

export type UpdateConversationResponses = {
    /**
     * OK
     */
    200: ConversationSchema;
};

export type UpdateConversationResponse =
    UpdateConversationResponses[keyof UpdateConversationResponses];

export type UpdateMySettingsData = {
    body: UpdateSettingSchema;
    path?: never;
    query?: never;
    url: "/api/settings/update";
};

export type UpdateMySettingsResponses = {
    /**
     * OK
     */
    200: SettingSchema;
};

export type UpdateMySettingsResponse = UpdateMySettingsResponses[keyof UpdateMySettingsResponses];

export type GlobalSyncTypesData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/sync";
};

export type GlobalSyncTypesResponses = {
    /**
     * Response
     * OK
     */
    200: SyncMessageMetadata | SyncMessage | SyncConversation | SyncMember | SyncUser;
};

export type GlobalSyncTypesResponse = GlobalSyncTypesResponses[keyof GlobalSyncTypesResponses];

export type GlobalSyncBootstrapData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Timestamp
         */
        timestamp?: string | null;
    };
    url: "/api/sync/bootstrap";
};

export type GlobalSyncBootstrapResponses = {
    /**
     * Response
     * OK
     */
    200: Array<SyncMessageMetadata | SyncMessage | SyncConversation | SyncMember | SyncUser>;
};

export type GlobalSyncBootstrapResponse =
    GlobalSyncBootstrapResponses[keyof GlobalSyncBootstrapResponses];

export type ClientOptions = {
    baseUrl: string;
};
