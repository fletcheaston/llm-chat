// This file is auto-generated by @hey-api/openapi-ts
import type { Client, Options as ClientOptions, TDataShape } from "@hey-api/client-fetch";

import { client as _heyApiClient } from "./client.gen";
import type {
    CheckLoginData,
    CheckLoginErrors,
    CheckLoginResponses,
    CreateConversationData,
    CreateConversationResponses,
    CreateConversationTagData,
    CreateConversationTagResponses,
    GithubCallbackData,
    GithubCallbackErrors,
    GithubCallbackResponses,
    ListMyConversationTagsData,
    ListMyConversationTagsResponses,
    ListMyConversationsData,
    ListMyConversationsResponses,
    LogoutData,
    LogoutResponses,
    UpdateConversationData,
    UpdateConversationResponses,
    UpdateConversationTagData,
    UpdateConversationTagResponses,
} from "./types.gen";

export type Options<
    TData extends TDataShape = TDataShape,
    ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Check Login
 */
export const checkLogin = <ThrowOnError extends boolean = false>(
    options?: Options<CheckLoginData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        CheckLoginResponses,
        CheckLoginErrors,
        ThrowOnError
    >({
        url: "/api/auth/login",
        ...options,
    });
};

/**
 * Logout
 */
export const logout = <ThrowOnError extends boolean = false>(
    options?: Options<LogoutData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, unknown, ThrowOnError>({
        url: "/api/auth/logout",
        ...options,
    });
};

/**
 * Github Callback
 */
export const githubCallback = <ThrowOnError extends boolean = false>(
    options: Options<GithubCallbackData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).get<
        GithubCallbackResponses,
        GithubCallbackErrors,
        ThrowOnError
    >({
        url: "/api/auth/github-callback",
        ...options,
    });
};

/**
 * List My Conversations
 */
export const listMyConversations = <ThrowOnError extends boolean = false>(
    options?: Options<ListMyConversationsData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        ListMyConversationsResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversations",
        ...options,
    });
};

/**
 * Create Conversation
 */
export const createConversation = <ThrowOnError extends boolean = false>(
    options: Options<CreateConversationData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<
        CreateConversationResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversations",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Update Conversation
 */
export const updateConversation = <ThrowOnError extends boolean = false>(
    options: Options<UpdateConversationData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<
        UpdateConversationResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversations/{conversation_id}",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * List My Conversation Tags
 */
export const listMyConversationTags = <ThrowOnError extends boolean = false>(
    options?: Options<ListMyConversationTagsData, ThrowOnError>
) => {
    return (options?.client ?? _heyApiClient).get<
        ListMyConversationTagsResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversation-tags",
        ...options,
    });
};

/**
 * Create Conversation Tag
 */
export const createConversationTag = <ThrowOnError extends boolean = false>(
    options: Options<CreateConversationTagData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).post<
        CreateConversationTagResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversation-tags",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};

/**
 * Update Conversation Tag
 */
export const updateConversationTag = <ThrowOnError extends boolean = false>(
    options: Options<UpdateConversationTagData, ThrowOnError>
) => {
    return (options.client ?? _heyApiClient).put<
        UpdateConversationTagResponses,
        unknown,
        ThrowOnError
    >({
        security: [
            {
                in: "cookie",
                name: "sessionid",
                type: "apiKey",
            },
        ],
        url: "/api/conversation-tags/{tag_id}",
        ...options,
        headers: {
            "Content-Type": "application/json",
            ...options.headers,
        },
    });
};
